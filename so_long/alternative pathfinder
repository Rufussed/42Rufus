int	check_all_player_accessible_nodes(t_data *data)
{
	t_path_data	*path_data;
	int			result;

	path_data = malloc(sizeof(t_path_data));
	if (!path_data)
		return (0);
	path_data->current_node = malloc(sizeof(t_node));
	path_data->cnq = malloc(sizeof(t_node));
	path_data->cnv = malloc(sizeof(t_node));
	if (!path_data->current_node || !path_data->cnv || !path_data->cnq)
	{
		free(path_data);
		return (0);
	}
	path_data->visited_nodes = NULL;
	path_data->current_node->x = data->player_x;
	path_data->current_node->y = data->player_y;
	path_data->cnv->x = data->player_x;
	path_data->cnv->y = data->player_y;
	path_data->cnq->x = data->player_x;
	path_data->cnq->y = data->player_y;
	path_data->visited_nodes = ft_lstnew(path_data->cnv);
	path_data->queued_nodes = ft_lstnew(path_data->cnq);
	while (path_data->queued_nodes)
	{
		path_data->current_node = (t_node *)path_data->queued_nodes->content;
		path_data->cnv->x = path_data->current_node->x;
		path_data->cnv->y = path_data->current_node->y;
		lst_remove_front(&path_data->queued_nodes);
		find_adjacent_nodes(data, path_data);
		ft_lstadd_back(&path_data->visited_nodes, 
			ft_lstnew(path_data->cnv));
	}
	result = check_visited_for_keys_exit(data, path_data);
	free(path_data->cnv);
	free_path_data(path_data);
	return (result);
}