/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rlane <rlane@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/14 13:49:23 by rlane             #+#    #+#             */
/*   Updated: 2024/06/03 10:36:50 by rlane            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

static char	*get_chars_after_newline(char *line_buffer)
{
	char			*extra_chars;
	unsigned int	i;

	i = 0;
	while (line_buffer[i] != '\n' && line_buffer[i] != '\0')
		i++;
	if (line_buffer[i] == '\0' || line_buffer[i + 1] == '\0')
		return (NULL);
	extra_chars = ft_substr(line_buffer, i + 1, ft_strlen(line_buffer) - i - 1);
	if (extra_chars && *extra_chars == '\0')
	{
		free(extra_chars);
		extra_chars = NULL;
	}
	return (extra_chars);
}

//includes the \n or \0 in the return hence i + 1 in substr
static char	*get_chars_to_newline(char *line_buffer)
{
	char			*line;
	unsigned int	i;

	if (!line_buffer)
		return (NULL);
	i = 0;
	while (line_buffer[i] != '\n' && line_buffer[i] != '\0')
		i++;
	line = ft_substr(line_buffer, 0, i + 1);
	if (line && *line == '\0')
	{
		free(line);
		line = NULL;
	}
	free(line_buffer);
	return (line);
}
// keeps reading and joining until read_buffer contains /n fd ends

static char	*fill_line_buffer(int fd, char *line_buffer, char *read_buffer)
{
	ssize_t		bytes_read;
	char		*temp;

	bytes_read = read(fd, read_buffer, BUFFER_SIZE);
	while (bytes_read > 0)
	{
		if (!line_buffer)
			line_buffer = ft_strdup("");
		read_buffer[bytes_read] = '\0';
		temp = line_buffer;
		line_buffer = ft_strjoin(temp, read_buffer);
		free(temp);
		if (ft_strchr(read_buffer, '\n'))
			break ;
		bytes_read = read(fd, read_buffer, BUFFER_SIZE);
	}
	if (bytes_read == -1)
	{
		free(line_buffer);
		return (NULL);
	}
	return (line_buffer);
}

static char	*free_extra_chars_return_null(char **extra_chars)
{
	//free(*extra_chars);
	*extra_chars = NULL;
	return (NULL);
}

char	*get_next_line(int fd)
{
	static char	*extra_chars;
	char		*line_buffer;
	char		*read_buffer;

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (free_extra_chars_return_null(&extra_chars));
	read_buffer = (char *)malloc((BUFFER_SIZE + 1) * sizeof(char));
	if (!read_buffer)
		return (free_extra_chars_return_null(&extra_chars));
	line_buffer = fill_line_buffer(fd, extra_chars, read_buffer);
	free(read_buffer);
	if (!line_buffer)
		return (free_extra_chars_return_null(&extra_chars));
	extra_chars = get_chars_after_newline(line_buffer);
	return (get_chars_to_newline(line_buffer));
}
